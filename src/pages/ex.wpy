<style lang='css'>
    page {
        height: 100%
    }

    .timer-box {
        width: 100%;
        margin-top: 30%;
        text-align: center;
    }

    .timer {
        font-size: 80px;
        color: #fff;
    }

    .tip {
        padding: 30rpx;
        margin: 30rpx;
        background-color: rgba(176,151,110, 0.5);
        color: #fff;
        font-size: 28rpx;
        box-sizing: border-box;
    }

    .btn {
        width: 70px;
        height: 70px;
        background-repeat: no-repeat;
        background-color: #B0976E;
        background-position: 50% 50%;
        border-radius: 50%;
        position: absolute;
        left: 50%;
        transform: translateX(-50%);
        margin-top: 30px;
    }

    .shadow {
        width: 80px;
        height: 80px;
        opacity: 0.6;
        margin-top: 25px;
    }

    .btn-wrap {
        width: 100%;
        height: 200px;
        position: relative;
    }

    .left-btn {
        margin-left: -100px;
    }

    .right-btn {
        margin-left: 100px;
    }

    .btn-image {
        width: 22px;
        height: 30px;
        margin-top: 3px;
        margin-left: 9px;
    }

    .image {
        height: 30px;
        width: 30px;
        background-repeat: no-repeat;
        margin-left: 15px;
        margin-top: 5px;
        background-size: cover;
    }

    .text {
        font-size: 16px;
        text-align: center;
        color: #fff;
        margin-top: 5px;
    }
</style>

<template>
    <view class="container ex" style="background-size:cover; background-image: url({{backgroundImage}})" @tap="onTapStop">
        <view class="timer-box">
            <view class="timer">{{showTime}}</view>
            <view class="tip" wx:if="{{sleeping}}">每{{duration}}秒更新计时，以减少耗电。</view>
        </view>
        <view class="btn-wrap {{isPause ? '' : 'hide'}}">
            <view>
                <view class="btn shadow left-btn"></view>

                <form report-submit="true" @submit="getFormId">
                    <button class="reset-button btn left-btn" form-type="submit" @tap.stop="goon">
                        <view class="image">
                            <image class="btn-image" src="/images/go-on.png"></image>
                        </view>
                        <view class="text">继续</view>
                    </button>
                </form>
            </view>
            <view>
                <view class="btn shadow right-btn"></view>
                <form report-submit="true" @submit="getFormId">
                    <button class="reset-button btn right-btn" form-type="submit" @tap.stop="end">
                        <view class="image">
                            <image class="btn-image" style="margin-left: 11px;" src="/images/stop-btn.png"></image>
                        </view>
                        <view class="text">结束</view>
                    </button>
                </form>
            </view>

        </view>
    </view>
</template>

<script>
    import wepy from 'wepy';
    import formIds from "../mixins/formIds";
    import ex from "../mixins/ex";

    function logBright () {
        wx.getScreenBrightness({
            success: (o) => {
                console.log(`屏幕亮度${o.value}`);
            }
        });
    }

    export default class Tag extends wepy.page {
        config = {
            disableScroll: true,
            navigationBarTitleText: "练习"
        };

        mixins = [formIds, ex];

        data = {
            cost: 0,
            total: "",
            backgroundImage: "",
            isFinite: false,
            isPause: "",
            duration: 1,
            sleeping: false
        };

        computed = {
            showTime () {
                if (!this.isFinite && this.cost >= this.total) {
                    return "00:00";
                }

                let time = this.isFinite ? this.cost : this.total - this.cost;
                let h = Math.floor(time / 3600);
                time -= h * 3600;
                let m = Math.floor(time / 60);
                time -= m * 60;
                let s = time;

                let t = "";

                if (h > 0) {
                    t = ("00" + h + ":").substr(-3);
                }

                t += ("00" + m + ":").substr(-3);
                t += ("00" + s).substr(-2);

                return t;
            }
        };

        methods = {
//            pause () {
//                this.pause();
//            },
            goon () {
                this.goon();
            },
            end () {
                this.end(true);
            },
            onTapStop () {
                this.wake();
                this.pause();
            }
        };

        pause () {
            wx.pauseBackgroundAudio();
            this.isPause = true;
            this.stopTiming();
            this.clearSleepTimer();
        }

        goon () {
            this.playBackgroundAudio();
            this.isPause = false;
            this.timing(true, false, 1);
            this.setSleepTimer(true);
        }

        setSleepTimer (paused) {
            this.sleepTimer = true;
            this.costBeforeSleep = this.cost;
            this.bePaused = paused;
            console.log("休眠定时被设置");
        }

        clearSleepTimer () {
            this.sleepTimer = false;
            this.costBeforeSleep = 0;
            console.log("休眠定时被清除");
        }

        sleep () {
            console.log("即将休眠");
            this.sleepTimer = false;
            this.sleeping = true;
            this.bePaused = false;
            this.duration = this.sleepDuration;

            wx.getScreenBrightness({
                success: (o) => {
                    console.log(`休眠前：屏幕亮度${o.value}`);

                    this.screenBrightness = o.value;

                    wx.setScreenBrightness({
                        value: o.value < 0.2 ? o.value : 0.2,
                        success: () => {
                            wx.setKeepScreenOn({
                                keepScreenOn: true
                            });

                            console.log("进入休眠");
                            logBright();
                        }
                    });
                }
            });
        }

        // 恢复亮度，计时频率恢复为1秒
        wake () {
            console.log("唤醒");
            this.sleeping = false;
            this.duration = 1;

            if (this.screenBrightness !== "") {
                wx.setScreenBrightness({
                    value: this.screenBrightness,
                    success: () => {
                        wx.setKeepScreenOn({
                            keepScreenOn: false
                        });

                        logBright();
                    }
                });
            }
        }

        timing(reset, immediate, duration) {
            let run = () => {
                if (!this.isFinite && this.total - this.cost <= 0) {
                    this.end(true);
                }
                else {
                    let diff = 0;
                    this.cost += this.duration;

                    console.log(`正在计时：已练习${this.cost}秒`);

                    // 修正计时：整10
                    if (this.bePaused) {
                        diff = 10 - this.costBeforeSleep % 10;
                    }

                    if (this.sleepTimer && this.cost >= this.costBeforeSleep + diff + this.sleepTimeout) {
                        this.sleep();
                    }

                    this.timing();
                }

                this.$apply();
            };

            if (reset && this.timer) {
                console.log("计时被清除");
                clearTimeout(this.timer);
            }

            if (duration) {
                this.duration = duration;
            }

            if (immediate) {
                run();
            }
            else {
                this.timer = setTimeout(run, this.duration * 1000);
            }
        }

        stopTiming () {
            console.log("停止计时");
            clearTimeout(this.timer);
        }

        removeExStorage () {
            console.log("练习后台计时已被清除");
            wx.removeStorage({
                key: "ex_background"
            });
        }

        setAutoEndTimer () {
            // 时间到，自动结束
            if (!this.isFinite) {
                clearTimeout(this.autoEndTimer);

                this.autoEndTimer = setTimeout(() => {
                    this.end(true);
                }, (this.total - this.cost) * 1000);
            }
        }

        dealStorage (exStorage, cb, noStorage) {
            if (exStorage) {
                this.cost = exStorage.cost;
                this.isPause = exStorage.isPause;
                this.isFinite = exStorage.isFinite;

                if (!this.isPause) {
                    this.cost += Math.floor((new Date().getTime() - exStorage.time) / 1000);
                }

                cb(exStorage);

                this.removeExStorage();
            }
            else {
                noStorage && noStorage();
            }
        }

        onShow() {
            let exStorage = wx.getStorageSync("ex_background");

            // 清除自动结束计时器
            if (!this.isFinite && this.autoEndTimer) {
                clearTimeout(this.autoEndTimer);
                this.autoEndTimer = null;
            }

            this.dealStorage(
                exStorage,
                () => {
                    if (!this.isPause) {
                        this.timing(true, false, 1);
                        this.setSleepTimer();
                    }
                },
                () => {
                    console.log("初始化计时");
                    this.timing(true, false, 1);
                    this.setSleepTimer();
                }
            );

            if (!this.hasPlayMusic) {
                this.hasPlayMusic = true;

                this.playAudio(this.$parent.globalData.resPerfix + '/res/music/begin.mp3', 'begin', () => {
                    this.playBackgroundAudio();
                });
            }
        }

        onHide() {
            this.setAutoEndTimer();
            this.stopTiming();
            this.clearSleepTimer();

            wx.setStorage({
                key: "ex_background",
                data: {
                    time: new Date().getTime(),
                    isPause: !!this.isPause,
                    isFinite: !!this.isFinite,
                    cost: this.cost || 0,
                    total: this.total || 0,
                    bright: this.screenBrightness
                }
            });

            console.log("进入后台，缓存数据：", {
                time: new Date().getTime(),
                isPause: !!this.isPause,
                isFinite: !!this.isFinite,
                cost: this.cost || 0,
                total: this.total || 0,
                bright: this.screenBrightness
            });
        }

        onLoad(params) {
            //this.duration = 1;
            let storage = wx.getStorageSync("ex_background");
            wx.hideShareMenu();

            this.sleepDuration = 15;
            this.sleepTimeout = 20;
            this.screenBrightness = "";
            this.sleepTimer = false;
            this.costBeforeSleep = 0;
            this.backgroundImage = this.$parent.globalData.backgroundImage;
            this.$parent.globalData.isInex = true;
            this.params = params || {};

            this.dealStorage(
                storage,
                (storage) => {
                    this.hasPlayMusic = true;

                    if (storage.isFinite) {
                        this.params.isFinite = true;
                        this.isFinite = true;
                    }
                    else {
                        let total = storage.total;
                        let {hour, minute} = this.getTimeInfo(total);

                        this.total = total;
                        this.params.hour = hour;
                        this.params.minute = minute;
                    }
                },
                () => {
                    this.hasPlayMusic = false;

                    if (this.params.isFinite === "true") {
                        this.isFinite = true;
                    }
                    else {
                        this.total = (parseInt(this.params.hour) || 0) * 3600 + (parseInt(this.params.minute) || 0) * 60 + (parseInt(this.params.second) || 0);
                    }
                }
            );

        }

        playBackgroundAudio () {
            if (this.$parent.globalData.musicUrl) {
                this.playAudio(this.$parent.globalData.musicUrl, this.$parent.globalData.musicTitle)
            }
        }
    }
</script>
